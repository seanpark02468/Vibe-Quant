# -*- coding: utf-8 -*-
"""backtester_client

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SjIsdE1RTEgJAU0-7MF0IVWC6oLULNEc
"""

# /clients/backtester_client.py

import pandas as pd
import lightgbm as lgb
from scipy.stats import pearsonr
import streamlit as st
from ..config import DATA_PATH

class BacktesterClient:
    """
    데이터 로딩 및 간소화된 백테스팅을 수행하는 클라이언트.
    LightGBM 모델을 사용하여 팩터의 예측력을 평가하고 정보 계수(IC)를 계산합니다.
    """
    def __init__(self):
        """
        클라이언트를 초기화하고 데이터를 로드합니다.
        """
        self.stock_data = self.load_data()

    def load_data(self) -> pd.DataFrame:
        """
        지정된 경로에서 Parquet 형식의 주식 데이터를 로드합니다.

        Returns:
            pd.DataFrame: 로드된 주식 데이터프레임. 데이터 로드 실패 시 빈 데이터프레임 반환.
        """
        try:
            df = pd.read_parquet(DATA_PATH)
            df['date'] = pd.to_datetime(df['date'])
            # 필요한 경우 데이터 전처리 추가 (예: 결측치 처리)
            df.sort_values(by=['ticker', 'date'], inplace=True)
            df.reset_index(drop=True, inplace=True)
            return df
        except FileNotFoundError:
            st.error(f"데이터 파일을 찾을 수 없습니다: {DATA_PATH}")
            return pd.DataFrame()
        except Exception as e:
            st.error(f"데이터 로드 중 오류 발생: {e}")
            return pd.DataFrame()

    def run_backtest(self, factor_expression: str) -> float:
        """
        주어진 팩터 표현식을 평가하고 LightGBM을 사용하여 백테스트를 실행합니다.

        Args:
            factor_expression (str): 평가할 알파 팩터의 문자열 표현식.
                                     (예: 'close / open - 1')

        Returns:
            float: 계산된 정보 계수(IC). 오류 발생 시 0.0을 반환합니다.
        """
        if self.stock_data.empty:
            st.warning("주식 데이터가 없어 백테스팅을 건너뜁니다.")
            return 0.0

        try:
            # 1. 팩터 값 계산 (pd.eval 사용)
            # 'self.stock_data'의 컬럼을 지역 변수처럼 사용하여 표현식 계산
            # 보안 참고: 실제 서비스에서는 eval 사용에 매우 신중해야 합니다.
            # 이 프로젝트에서는 내부적으로 생성된 팩터만 사용하므로 제한적으로 허용합니다.
            factor_values = self.stock_data.eval(factor_expression, engine='python')

            # 2. 예측 대상(target) 생성: 다음 날의 수익률
            # 그룹별(ticker)로 수익률을 계산하여 데이터 왜곡 방지
            target = self.stock_data.groupby('ticker')['close'].pct_change(1).shift(-1)

            # 3. 데이터셋 준비
            df_backtest = pd.DataFrame({
                'factor': factor_values,
                'target': target
            }).dropna()

            if len(df_backtest) < 100: # 학습에 필요한 최소 데이터 수
                st.warning("백테스팅에 사용할 데이터가 너무 적습니다.")
                return 0.0

            X = df_backtest[['factor']]
            y = df_backtest['target']

            # 4. LightGBM 모델 학습 및 예측
            model = lgb.LGBMRegressor(random_state=42, n_estimators=100)
            model.fit(X, y)
            predictions = model.predict(X)

            # 5. 정보 계수(IC) 계산
            # 피어슨 상관계수를 사용하여 예측값과 실제값의 상관관계 측정
            ic, _ = pearsonr(predictions, y)

            return float(ic)

        except Exception as e:
            # st.warning(f"'{factor_expression}' 팩터 백테스팅 중 오류 발생: {e}")
            # 유효하지 않은 팩터 표현식이 많을 수 있으므로 경고는 주석 처리
            return 0.0